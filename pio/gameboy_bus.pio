
.define public pin_clk         17
.define public pin_rd          18
.define public pin_a15        35
.define public pin_a14        34
.define public pin_a13         33
.define public pin_ad_base     20
.define public pin_data_base   36

; pins need to be shifted for internal use as PIO is set to upper pins

.define PIN_CLK_INT 1
.define PIN_A15_INT 19

.program gameboy_bus_write_to_data
.wrap_target
    pull block                                 ; pull the data from the Tx FIFO into the OSR
    out  pins 8                              ; output 8 bits of data
    mov  osr ~null                             ; OSR=FFFFFFFF
    out  pindirs 8                             ; start driving the data bus
    wait 0 pin 0                        ; wait for clk
    mov  osr null
    wait 1 pin 0[3]                     ; wait for clk
    out  pindirs 8                          ; stop driving the data bus
    .wrap ; wrap back to beginning


.program gameboy_bus_detect_a15_low_a14_irqs
a14_high:
    irq set 1
.wrap_target
    wait 0 pin 14  ; wait for clk to become low
public entry_point:
    wait 1 pin 14 [2] ; wait for clk to become high
    mov  isr null
    in pins 1 ; shift in a15
    mov y isr ; store a15 pin in y
    jmp  !y hdma_read ; GBC has the HDMA read which does not strobe A15
    wait 0 pin 0 ; wait for a15 to become low
continue_hdma_read:
    jmp pin a14_high ; if A14 is high
    irq set 0 ; if a A14 is low
    .wrap
hdma_read:
    jmp continue_hdma_read [7]


.program gameboy_bus_rom_low
idle:
.wrap_target
    wait 1 irq 0 rel ; will wait on irq 0 on SM0 (low) and irq 1 on SM1 (high)
    jmp pin idle ; on reads back to idle

    in   pins 14         ; shift A0 to A13 pins into ISR and auto push
    .wrap


.program gameboy_bus_rom_high
idle:
.wrap_target
    wait 1 irq 0 rel ; will wait on irq 0 on SM0 (low) and irq 1 on SM1 (high)
    jmp pin idle ; on reads back to idle

    in   pins 14         ; shift A0 to A13 pins into ISR and auto push
    .wrap


.program gameboy_mbc_commands
on_write:
    in pins 16 ; shift in all addr pins
    in null 16; fill up with zeros, triggers auto-push
    wait 0 pin 29 [7] ; wait for clk to become low
    in pins 24 ; sample addr pins + data pins
    in null 24 ; fill up with zeroes, shift out addr pins to leave only data, triggers auto push
.wrap_target
public entry_point:
    wait 1 pin 29 [1]                    ; wait for clk cycle to end
    wait 0 pin 15 [1] ; wait for a15 to become low
    jmp pin on_write ; on reads back to idle
    wait 0 pin 29 ; wait for clk to become low
    .wrap ; wrap back to beginning


.program gameboy_saveram_read
on_write:
    irq set 0
public entry_point:                                     ; *** Default Entry Point ***
    set x 5 ; set compare value
.wrap_target
idle:
    wait 1 pin 29 [1]                    ; wait for clk cycle to end
    wait 0 pin 31 [1]                     ; wait for cs to become low

    in pins 16 ; shift in all addr pins
    in null 29 ; shift A0 to A12 out of isr. A15 is at pos 2 afterwards, A13 at pos 0
    mov y isr ; mov isr into y
    jmp x!=y idle ; if this is not a saveram access back to idle

    jmp pin on_write ; on writes we do things different

    in pins 13  ; sample A0 to A12 addr pins again
    in null 19 ; shift addr to the right position 
    push
    wait 0 pin 29 ; sync clk cycle

    .wrap


.program gameboy_saveram_write
.wrap_target
    wait 1 irq 0
    in pins 13 ; sample A0 to A12 addr pins
    in null 19 ; shift addr to right position and auto-push
    wait 0 pin 29 [7] ; wait for second half of clk cycle
    in pins 24 ; shift in addr pins and data pins
    in null 24 ; shift data pins to right position and auto push
    .wrap
